import pprint
from sqlalchemy import Column, Float, ForeignKey, Integer, String, MetaData, Table, create_engine, text
import datetime

engine = create_engine('sqlite:///:memory')
metadata = MetaData()

cliente = Table(
    'cliente',
    metadata,
    Column('id', Integer, primary_key=True, autoincrement=True),
    Column('cpf', String(11), nullable=False),
    Column('nome', String(100), nullable=False), 
    Column('endereco', String(120))
)

conta = Table(
    'conta',
    metadata,
    Column('id', Integer, primary_key=True, autoincrement=True),
    Column('agencia', String(4)),
    Column('saldo', Float(5)),
    Column('id_cliente', Integer, ForeignKey("cliente.id"))
)

metadata.create_all(engine)


class Utils:
    
    def valida_cpf(self, cpf):
        if len(cpf) == 11:
            if cpf.isnumeric:
                return True
            else:
                print("Informe apenas números!")
        else:
            print("CPF deve conter 11 números!")
        return False
    
    def nome_cliente(self, id_cliente):
        sql = text("select * from cliente where id = :id")
        sql = sql.bindparams(id = id_cliente)
        retorno = engine.execute(sql)
        cliente = retorno.first()
        nome = cliente[2]
        return nome

    def id_cliente(self, cpf):
        sql = text("select * from cliente where cpf = :cpf")
        sql = sql.bindparams(cpf = cpf)
        retorno = engine.execute(sql)
        cliente = retorno.first()
        if cliente:
            id_cliente = cliente[0]
        else:
            id_cliente = 0
        return id_cliente
    

menu = """
############## MENU ################
1. Cadastrar Cliente
2. Listar Clientes
3. Cadastrar Conta
4. Listar Contas
5. Sair
####################################
"""

utils = Utils()

while True:
    
    print(menu)
    
    op = int(input("Digite uma opção: "))
    
    if op == 1:
               
        print("""\n################### Cadastrar Cliente ##################\n""")
        
        cpf = input("CPF do Cliente (apenas números): ")
        
        while not utils.valida_cpf(cpf):
            cpf = input("CPF do Cliente (apenas números): ")   
        
        nome = input("NOME do Cliente: ")
        endereco = input("Endereço (logradouro,num,bairro,cidade/uf): ")
        #Pega último id da tabela cliente
        sql = text("select MAX(id) from cliente")
        retorno = engine.execute(sql)
        id = retorno.first()
        id_cliente = id[0]
        id_cliente = id_cliente + 1
        #Insere os dados na tabela cliente
        sql = text("insert into cliente values(:id, :cpf, :nome, :endereco)")
        sql = sql.bindparams(id=id_cliente, cpf=cpf, nome=nome, endereco=endereco)
        cliente = engine.execute(sql)
        print("\nCliente cadastrado com sucesso!\n")

    elif op == 2:
               
        print("""\n################### Listar Clientes ##################\n""")
        sql = text("select * from cliente order by nome")
        clientes = engine.execute(sql)
        for cliente in clientes:
            print(f"""CPF: {cliente.cpf}  Nome: {cliente.nome}
         ---> Endereço: {cliente.endereco}""")
    
    elif op == 3:
               
        print("""\n################### Cadastrar Conta ##################\n""")
        
        cpf = input("CPF do Cliente (apenas números): ")
        
        while not utils.valida_cpf(cpf):
            cpf = input("CPF do Cliente (apenas números): ")   
        
        id_cliente = utils.id_cliente(cpf)

        if id_cliente > 0:
            #Pega o último id da tabela conta
            sql = text("select MAX(id) from conta")
            retorno = engine.execute(sql)
            conta = retorno.first()
            ultimo_id = conta[0]
            id_conta = ultimo_id + 1
            #insere os dados na tabela conta
            sql = text("insert into conta values(:id, :agencia, :saldo, :id_cliente)")
            sql = sql.bindparams(id=id_conta, agencia="0001", saldo=0.0, id_cliente=id_cliente)
            conta = engine.execute(sql)
            print("\nConta cadastrada com sucesso!\n")
        else:
            print("\nCliente não cadastrado. Falha ao criar a conta.\n")
    
    elif op == 4:
               
        print("""\n################### Listar Contas ##################\n""")
        sql = text("select * from conta")
        contas = engine.execute(sql)
        for conta in contas:
            id_cliente = conta.id_cliente
            #Pega o nome do cliente titular da conta usando a função <nome_cliente>
            nome = utils.nome_cliente(id_cliente)
            print(f"""Agência: {conta.agencia}  Conta Corrente: {conta.id}  Saldo: {conta.saldo}
     --->Titular: {nome}""")

    elif op == 5:
        break
    
    else:
        print("Opção inválida")
